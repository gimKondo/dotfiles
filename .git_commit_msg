


# ==== Types ====
# [mainly use]
# feat: A new feature
# fix: A bug fix
#
# [others]
# build: Changes that affect the build system or external dependencies (example scopes: gulp, broccoli, npm)
# ci: Changes to our CI configuration files and scripts (example scopes: Travis, Circle, BrowserStack, SauceLabs)
# docs: Documentation only changes
# perf: A code change that improves performance
# refactor: A code change that neither fixes a bug nor adds a feature
# style: Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc)
# test: Adding missing tests or correcting existing tests
#
# see also
# https://www.conventionalcommits.org/
# https://github.com/angular/angular/blob/22b96b9/CONTRIBUTING.md#-commit-message-guidelines

# ==== Format ====
# type[(subtype)][!]: Subject
#
# Commit body...
#
# === Example(simple) ===
# fix: empty string bug
#
# === Example(full) ===
# feat(api)!: v1 API is extinct and transfered v2 API
#
# v1 API has serious problems, so only v2 API is provided.

# ==== The Seven Rules ====
# 1. Separate subject from body with a blank line
# 2. Limit the subject line to 50 characters
# 3. Capitalize the subject line
# 4. Do not end the subject line with a period
# 5. Use the imperative mood in the subject line
# 6. Wrap the body at 72 characters
# 7. Use the body to explain what and why vs. how
#
# How to Write a Git Commit Message http://chris.beams.io/posts/git-commit/

